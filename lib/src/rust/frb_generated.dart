// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/aescbc.dart';
import 'api/conwork.dart';
import 'api/jwxt/course.dart';
import 'api/jwxt/dekt.dart';
import 'api/jwxt/elective.dart';
import 'api/jwxt/exam.dart';
import 'api/jwxt/info.dart';
import 'api/jwxt/plan.dart';
import 'api/jwxt/score.dart';
import 'api/jwxt/semester.dart';
import 'api/session.dart';
import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -1761466720;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'rust_lib_hbfu_alex',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<bool> crateApiSessionHttpSessionAccessJwxt({
    required HttpSession that,
  });

  ArcCookieStoreMutex crateApiSessionHttpSessionAutoAccessorGetCookieStore({
    required HttpSession that,
  });

  Client crateApiSessionHttpSessionAutoAccessorGetClient({
    required HttpSession that,
  });

  void crateApiSessionHttpSessionAutoAccessorSetCookieStore({
    required HttpSession that,
    required ArcCookieStoreMutex cookieStore,
  });

  void crateApiSessionHttpSessionAutoAccessorSetClient({
    required HttpSession that,
    required Client client,
  });

  Future<String> crateApiSessionHttpSessionCompleteLogin({
    required HttpSession that,
    required String username,
    required String vpnPassword,
    required String oaPassword,
    required String captcha,
  });

  Future<Uint8List> crateApiSessionHttpSessionGetCaptcha({
    required HttpSession that,
  });

  Future<String> crateApiSessionHttpSessionGetFlowExecutionKey({
    required HttpSession that,
  });

  Future<HttpSession> crateApiSessionHttpSessionNew();

  Future<String> crateApiAescbcAesCbcEncrypt({required String plainText});

  Future<List<CourseSchedule>> crateApiSimpleApiCourse({
    required String semester,
  });

  Future<DEKT> crateApiSimpleApiDekt();

  Future<DEKTDetail> crateApiSimpleApiDektDetail({required String id});

  Future<ElectiveResponse> crateApiSimpleApiElective({
    required String semester,
  });

  Future<List<ExamSchedule>> crateApiSimpleApiExam({required String semester});

  Future<Uint8List> crateApiSimpleApiGetCaptcha();

  Future<String> crateApiSimpleApiLogin({
    required String username,
    required String vpnPassword,
    required String oaPassword,
    required String captcha,
  });

  Future<ExecutionPlanResponse> crateApiSimpleApiPlan();

  Future<ScoreTotal> crateApiSimpleApiScore({required String semester});

  Future<List<SemesterInfo>> crateApiSimpleApiSemester({required bool isAll});

  Future<StudentInfo> crateApiSimpleApiStudentInfo();

  Future<String> crateApiConworkEncodeInp({required String input});

  Future<void> crateApiSimpleInitApp();

  Future<List<CourseSchedule>> crateApiJwxtCourseParseCourseSchedule({
    required String html,
  });

  Future<DEKT> crateApiJwxtDektParseDekt({required String html});

  Future<DEKTDetail> crateApiJwxtDektParseDektDetail({required String html});

  Future<List<DEKTList>> crateApiJwxtDektParseDektList({required String html});

  Future<List<DEKTTotal>> crateApiJwxtDektParseDektTotal({
    required String html,
  });

  Future<ElectiveResponse> crateApiJwxtElectiveParseElective({
    required String html,
  });

  Future<List<ExamSchedule>> crateApiJwxtExamParseExam({required String html});

  Future<ExecutionPlanResponse> crateApiJwxtPlanParsePlan({
    required String html,
  });

  Future<List<ScoreInfo>> crateApiJwxtScoreParseScore({required String html});

  Future<ScoreTotal> crateApiJwxtScoreParseScoreAll({required String html});

  Future<ScoreSummary> crateApiJwxtScoreParseScoreSummary({
    required String html,
  });

  Future<List<SemesterInfo>> crateApiJwxtSemesterParseSemester({
    required String html,
    required bool isAll,
  });

  Future<StudentInfo> crateApiJwxtInfoParseStudentInfo({required String html});

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcCookieStoreMutex;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcCookieStoreMutex;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ArcCookieStoreMutexPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Client;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Client;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ClientPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_CryptoError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_CryptoError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_CryptoErrorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_HttpSession;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_HttpSession;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_HttpSessionPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<bool> crateApiSessionHttpSessionAccessJwxt({
    required HttpSession that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSessionHttpSessionAccessJwxtConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSessionHttpSessionAccessJwxtConstMeta =>
      const TaskConstMeta(
        debugName: "HttpSession_access_jwxt",
        argNames: ["that"],
      );

  @override
  ArcCookieStoreMutex crateApiSessionHttpSessionAutoAccessorGetCookieStore({
    required HttpSession that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcCookieStoreMutex,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSessionHttpSessionAutoAccessorGetCookieStoreConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSessionHttpSessionAutoAccessorGetCookieStoreConstMeta =>
      const TaskConstMeta(
        debugName: "HttpSession_auto_accessor_get__cookie_store",
        argNames: ["that"],
      );

  @override
  Client crateApiSessionHttpSessionAutoAccessorGetClient({
    required HttpSession that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSessionHttpSessionAutoAccessorGetClientConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSessionHttpSessionAutoAccessorGetClientConstMeta =>
      const TaskConstMeta(
        debugName: "HttpSession_auto_accessor_get_client",
        argNames: ["that"],
      );

  @override
  void crateApiSessionHttpSessionAutoAccessorSetCookieStore({
    required HttpSession that,
    required ArcCookieStoreMutex cookieStore,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcCookieStoreMutex(
            cookieStore,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 4)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSessionHttpSessionAutoAccessorSetCookieStoreConstMeta,
        argValues: [that, cookieStore],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSessionHttpSessionAutoAccessorSetCookieStoreConstMeta =>
      const TaskConstMeta(
        debugName: "HttpSession_auto_accessor_set__cookie_store",
        argNames: ["that", "cookieStore"],
      );

  @override
  void crateApiSessionHttpSessionAutoAccessorSetClient({
    required HttpSession that,
    required Client client,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            client,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 5)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSessionHttpSessionAutoAccessorSetClientConstMeta,
        argValues: [that, client],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSessionHttpSessionAutoAccessorSetClientConstMeta =>
      const TaskConstMeta(
        debugName: "HttpSession_auto_accessor_set_client",
        argNames: ["that", "client"],
      );

  @override
  Future<String> crateApiSessionHttpSessionCompleteLogin({
    required HttpSession that,
    required String username,
    required String vpnPassword,
    required String oaPassword,
    required String captcha,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
            that,
            serializer,
          );
          sse_encode_String(username, serializer);
          sse_encode_String(vpnPassword, serializer);
          sse_encode_String(oaPassword, serializer);
          sse_encode_String(captcha, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSessionHttpSessionCompleteLoginConstMeta,
        argValues: [that, username, vpnPassword, oaPassword, captcha],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSessionHttpSessionCompleteLoginConstMeta =>
      const TaskConstMeta(
        debugName: "HttpSession_complete_login",
        argNames: ["that", "username", "vpnPassword", "oaPassword", "captcha"],
      );

  @override
  Future<Uint8List> crateApiSessionHttpSessionGetCaptcha({
    required HttpSession that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSessionHttpSessionGetCaptchaConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSessionHttpSessionGetCaptchaConstMeta =>
      const TaskConstMeta(
        debugName: "HttpSession_get_captcha",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiSessionHttpSessionGetFlowExecutionKey({
    required HttpSession that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSessionHttpSessionGetFlowExecutionKeyConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSessionHttpSessionGetFlowExecutionKeyConstMeta =>
      const TaskConstMeta(
        debugName: "HttpSession_get_flow_execution_key",
        argNames: ["that"],
      );

  @override
  Future<HttpSession> crateApiSessionHttpSessionNew() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSessionHttpSessionNewConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSessionHttpSessionNewConstMeta =>
      const TaskConstMeta(debugName: "HttpSession_new", argNames: []);

  @override
  Future<String> crateApiAescbcAesCbcEncrypt({required String plainText}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(plainText, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoError,
        ),
        constMeta: kCrateApiAescbcAesCbcEncryptConstMeta,
        argValues: [plainText],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiAescbcAesCbcEncryptConstMeta =>
      const TaskConstMeta(
        debugName: "aes_cbc_encrypt",
        argNames: ["plainText"],
      );

  @override
  Future<List<CourseSchedule>> crateApiSimpleApiCourse({
    required String semester,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(semester, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_course_schedule,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleApiCourseConstMeta,
        argValues: [semester],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleApiCourseConstMeta =>
      const TaskConstMeta(debugName: "api_course", argNames: ["semester"]);

  @override
  Future<DEKT> crateApiSimpleApiDekt() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dekt,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleApiDektConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleApiDektConstMeta =>
      const TaskConstMeta(debugName: "api_dekt", argNames: []);

  @override
  Future<DEKTDetail> crateApiSimpleApiDektDetail({required String id}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(id, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dekt_detail,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleApiDektDetailConstMeta,
        argValues: [id],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleApiDektDetailConstMeta =>
      const TaskConstMeta(debugName: "api_dekt_detail", argNames: ["id"]);

  @override
  Future<ElectiveResponse> crateApiSimpleApiElective({
    required String semester,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(semester, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_elective_response,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleApiElectiveConstMeta,
        argValues: [semester],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleApiElectiveConstMeta =>
      const TaskConstMeta(debugName: "api_elective", argNames: ["semester"]);

  @override
  Future<List<ExamSchedule>> crateApiSimpleApiExam({required String semester}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(semester, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_exam_schedule,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleApiExamConstMeta,
        argValues: [semester],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleApiExamConstMeta =>
      const TaskConstMeta(debugName: "api_exam", argNames: ["semester"]);

  @override
  Future<Uint8List> crateApiSimpleApiGetCaptcha() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleApiGetCaptchaConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleApiGetCaptchaConstMeta =>
      const TaskConstMeta(debugName: "api_get_captcha", argNames: []);

  @override
  Future<String> crateApiSimpleApiLogin({
    required String username,
    required String vpnPassword,
    required String oaPassword,
    required String captcha,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(username, serializer);
          sse_encode_String(vpnPassword, serializer);
          sse_encode_String(oaPassword, serializer);
          sse_encode_String(captcha, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleApiLoginConstMeta,
        argValues: [username, vpnPassword, oaPassword, captcha],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleApiLoginConstMeta => const TaskConstMeta(
    debugName: "api_login",
    argNames: ["username", "vpnPassword", "oaPassword", "captcha"],
  );

  @override
  Future<ExecutionPlanResponse> crateApiSimpleApiPlan() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_execution_plan_response,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleApiPlanConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleApiPlanConstMeta =>
      const TaskConstMeta(debugName: "api_plan", argNames: []);

  @override
  Future<ScoreTotal> crateApiSimpleApiScore({required String semester}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(semester, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_score_total,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleApiScoreConstMeta,
        argValues: [semester],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleApiScoreConstMeta =>
      const TaskConstMeta(debugName: "api_score", argNames: ["semester"]);

  @override
  Future<List<SemesterInfo>> crateApiSimpleApiSemester({required bool isAll}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_bool(isAll, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_semester_info,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleApiSemesterConstMeta,
        argValues: [isAll],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleApiSemesterConstMeta =>
      const TaskConstMeta(debugName: "api_semester", argNames: ["isAll"]);

  @override
  Future<StudentInfo> crateApiSimpleApiStudentInfo() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_student_info,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiSimpleApiStudentInfoConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleApiStudentInfoConstMeta =>
      const TaskConstMeta(debugName: "api_student_info", argNames: []);

  @override
  Future<String> crateApiConworkEncodeInp({required String input}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(input, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiConworkEncodeInpConstMeta,
        argValues: [input],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiConworkEncodeInpConstMeta =>
      const TaskConstMeta(debugName: "encode_inp", argNames: ["input"]);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Future<List<CourseSchedule>> crateApiJwxtCourseParseCourseSchedule({
    required String html,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_course_schedule,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiJwxtCourseParseCourseScheduleConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJwxtCourseParseCourseScheduleConstMeta =>
      const TaskConstMeta(
        debugName: "parse_course_schedule",
        argNames: ["html"],
      );

  @override
  Future<DEKT> crateApiJwxtDektParseDekt({required String html}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dekt,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiJwxtDektParseDektConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJwxtDektParseDektConstMeta =>
      const TaskConstMeta(debugName: "parse_dekt", argNames: ["html"]);

  @override
  Future<DEKTDetail> crateApiJwxtDektParseDektDetail({required String html}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_dekt_detail,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiJwxtDektParseDektDetailConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJwxtDektParseDektDetailConstMeta =>
      const TaskConstMeta(debugName: "parse_dekt_detail", argNames: ["html"]);

  @override
  Future<List<DEKTList>> crateApiJwxtDektParseDektList({required String html}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_dekt_list,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiJwxtDektParseDektListConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJwxtDektParseDektListConstMeta =>
      const TaskConstMeta(debugName: "parse_dekt_list", argNames: ["html"]);

  @override
  Future<List<DEKTTotal>> crateApiJwxtDektParseDektTotal({
    required String html,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_dekt_total,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiJwxtDektParseDektTotalConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJwxtDektParseDektTotalConstMeta =>
      const TaskConstMeta(debugName: "parse_dekt_total", argNames: ["html"]);

  @override
  Future<ElectiveResponse> crateApiJwxtElectiveParseElective({
    required String html,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_elective_response,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiJwxtElectiveParseElectiveConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJwxtElectiveParseElectiveConstMeta =>
      const TaskConstMeta(debugName: "parse_elective", argNames: ["html"]);

  @override
  Future<List<ExamSchedule>> crateApiJwxtExamParseExam({required String html}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_exam_schedule,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiJwxtExamParseExamConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJwxtExamParseExamConstMeta =>
      const TaskConstMeta(debugName: "parse_exam", argNames: ["html"]);

  @override
  Future<ExecutionPlanResponse> crateApiJwxtPlanParsePlan({
    required String html,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 31,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_execution_plan_response,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiJwxtPlanParsePlanConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJwxtPlanParsePlanConstMeta =>
      const TaskConstMeta(debugName: "parse_plan", argNames: ["html"]);

  @override
  Future<List<ScoreInfo>> crateApiJwxtScoreParseScore({required String html}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_score_info,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiJwxtScoreParseScoreConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJwxtScoreParseScoreConstMeta =>
      const TaskConstMeta(debugName: "parse_score", argNames: ["html"]);

  @override
  Future<ScoreTotal> crateApiJwxtScoreParseScoreAll({required String html}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_score_total,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiJwxtScoreParseScoreAllConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJwxtScoreParseScoreAllConstMeta =>
      const TaskConstMeta(debugName: "parse_score_all", argNames: ["html"]);

  @override
  Future<ScoreSummary> crateApiJwxtScoreParseScoreSummary({
    required String html,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_score_summary,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiJwxtScoreParseScoreSummaryConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJwxtScoreParseScoreSummaryConstMeta =>
      const TaskConstMeta(debugName: "parse_score_summary", argNames: ["html"]);

  @override
  Future<List<SemesterInfo>> crateApiJwxtSemesterParseSemester({
    required String html,
    required bool isAll,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          sse_encode_bool(isAll, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 35,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_semester_info,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiJwxtSemesterParseSemesterConstMeta,
        argValues: [html, isAll],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJwxtSemesterParseSemesterConstMeta =>
      const TaskConstMeta(
        debugName: "parse_semester",
        argNames: ["html", "isAll"],
      );

  @override
  Future<StudentInfo> crateApiJwxtInfoParseStudentInfo({required String html}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(html, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 36,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_student_info,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kCrateApiJwxtInfoParseStudentInfoConstMeta,
        argValues: [html],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiJwxtInfoParseStudentInfoConstMeta =>
      const TaskConstMeta(debugName: "parse_student_info", argNames: ["html"]);

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcCookieStoreMutex => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcCookieStoreMutex;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcCookieStoreMutex => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcCookieStoreMutex;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Client => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Client => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_CryptoError => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_CryptoError => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoError;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_HttpSession => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_HttpSession => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession;

  @protected
  ArcCookieStoreMutex
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcCookieStoreMutex(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcCookieStoreMutexImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Client
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CryptoError
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CryptoErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  HttpSession
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HttpSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  HttpSession
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HttpSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  HttpSession
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HttpSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String_None(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_string_string(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  ArcCookieStoreMutex
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcCookieStoreMutex(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcCookieStoreMutexImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Client
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  CryptoError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return CryptoErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  HttpSession
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return HttpSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CourseSchedule dco_decode_course_schedule(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return CourseSchedule(
      id: dco_decode_String(arr[0]),
      name: dco_decode_String(arr[1]),
      teacher: dco_decode_String(arr[2]),
      timeRange: dco_decode_String(arr[3]),
      dayOfWeek: dco_decode_String(arr[4]),
      section: dco_decode_usize(arr[5]),
      weeks: dco_decode_String(arr[6]),
      classroom: dco_decode_String(arr[7]),
      duration: dco_decode_String(arr[8]),
    );
  }

  @protected
  CreditInfo dco_decode_credit_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return CreditInfo(
      category: dco_decode_String(arr[0]),
      required_: dco_decode_i_32(arr[1]),
      limited: dco_decode_i_32(arr[2]),
      elective: dco_decode_i_32(arr[3]),
      public: dco_decode_i_32(arr[4]),
      total: dco_decode_i_32(arr[5]),
    );
  }

  @protected
  DEKT dco_decode_dekt(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DEKT(
      list: dco_decode_list_dekt_list(arr[0]),
      total: dco_decode_list_dekt_total(arr[1]),
    );
  }

  @protected
  DEKTDetail dco_decode_dekt_detail(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return DEKTDetail(field0: dco_decode_Map_String_String_None(arr[0]));
  }

  @protected
  DEKTList dco_decode_dekt_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 7)
      throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return DEKTList(
      id: dco_decode_String(arr[0]),
      semester: dco_decode_String(arr[1]),
      category: dco_decode_String(arr[2]),
      subCategory: dco_decode_String(arr[3]),
      activityName: dco_decode_String(arr[4]),
      credit: dco_decode_String(arr[5]),
      operationId: dco_decode_String(arr[6]),
    );
  }

  @protected
  DEKTTotal dco_decode_dekt_total(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DEKTTotal(
      category: dco_decode_String(arr[0]),
      totalCredit: dco_decode_String(arr[1]),
    );
  }

  @protected
  ElectiveResponse dco_decode_elective_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ElectiveResponse(
      credits: dco_decode_list_credit_info(arr[0]),
      courses: dco_decode_list_xqxkch_info(arr[1]),
    );
  }

  @protected
  ExamSchedule dco_decode_exam_schedule(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return ExamSchedule(
      id: dco_decode_u_32(arr[0]),
      courseCode: dco_decode_String(arr[1]),
      courseName: dco_decode_String(arr[2]),
      examTime: dco_decode_String(arr[3]),
      examLocation: dco_decode_String(arr[4]),
    );
  }

  @protected
  ExecutionPlan dco_decode_execution_plan(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return ExecutionPlan(
      id: dco_decode_u_32(arr[0]),
      semester: dco_decode_String(arr[1]),
      courseCode: dco_decode_String(arr[2]),
      courseName: dco_decode_String(arr[3]),
      department: dco_decode_String(arr[4]),
      credits: dco_decode_f_32(arr[5]),
      totalHours: dco_decode_f_32(arr[6]),
      assessmentMethod: dco_decode_String(arr[7]),
      courseType: dco_decode_String(arr[8]),
      isExam: dco_decode_String(arr[9]),
    );
  }

  @protected
  ExecutionPlanResponse dco_decode_execution_plan_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ExecutionPlanResponse(
      plans: dco_decode_list_execution_plan(arr[0]),
      semesters: dco_decode_list_String(arr[1]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<CourseSchedule> dco_decode_list_course_schedule(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_course_schedule).toList();
  }

  @protected
  List<CreditInfo> dco_decode_list_credit_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_credit_info).toList();
  }

  @protected
  List<DEKTList> dco_decode_list_dekt_list(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_dekt_list).toList();
  }

  @protected
  List<DEKTTotal> dco_decode_list_dekt_total(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_dekt_total).toList();
  }

  @protected
  List<ExamSchedule> dco_decode_list_exam_schedule(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_exam_schedule).toList();
  }

  @protected
  List<ExecutionPlan> dco_decode_list_execution_plan(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_execution_plan).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<ScoreInfo> dco_decode_list_score_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_score_info).toList();
  }

  @protected
  List<SemesterInfo> dco_decode_list_semester_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_semester_info).toList();
  }

  @protected
  List<XqxkchInfo> dco_decode_list_xqxkch_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_xqxkch_info).toList();
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (dco_decode_String(arr[0]), dco_decode_String(arr[1]));
  }

  @protected
  ScoreInfo dco_decode_score_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return ScoreInfo(
      id: dco_decode_u_32(arr[0]),
      term: dco_decode_String(arr[1]),
      courseId: dco_decode_String(arr[2]),
      courseName: dco_decode_String(arr[3]),
      score: dco_decode_f_32(arr[4]),
      credit: dco_decode_f_32(arr[5]),
      hours: dco_decode_f_32(arr[6]),
      gpa: dco_decode_f_32(arr[7]),
      examType: dco_decode_String(arr[8]),
      courseAttr: dco_decode_String(arr[9]),
      courseNature: dco_decode_String(arr[10]),
    );
  }

  @protected
  ScoreSummary dco_decode_score_summary(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ScoreSummary(
      creditTotal: dco_decode_f_32(arr[0]),
      gpaAverage: dco_decode_f_32(arr[1]),
    );
  }

  @protected
  ScoreTotal dco_decode_score_total(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ScoreTotal(
      info: dco_decode_list_score_info(arr[0]),
      summary: dco_decode_score_summary(arr[1]),
    );
  }

  @protected
  SemesterInfo dco_decode_semester_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SemesterInfo(
      key: dco_decode_String(arr[0]),
      value: dco_decode_String(arr[1]),
    );
  }

  @protected
  StudentInfo dco_decode_student_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 9)
      throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return StudentInfo(
      name: dco_decode_String(arr[0]),
      gender: dco_decode_String(arr[1]),
      studentId: dco_decode_String(arr[2]),
      department: dco_decode_String(arr[3]),
      major: dco_decode_String(arr[4]),
      className: dco_decode_String(arr[5]),
      admissionDate: dco_decode_String(arr[6]),
      admissionNumber: dco_decode_String(arr[7]),
      idNumber: dco_decode_String(arr[8]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  XqxkchInfo dco_decode_xqxkch_info(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 8)
      throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return XqxkchInfo(
      courseId: dco_decode_String(arr[0]),
      courseName: dco_decode_String(arr[1]),
      department: dco_decode_String(arr[2]),
      hours: dco_decode_i_32(arr[3]),
      credits: dco_decode_f_32(arr[4]),
      courseAttribute: dco_decode_String(arr[5]),
      selectionType: dco_decode_String(arr[6]),
      selected: dco_decode_String(arr[7]),
    );
  }

  @protected
  ArcCookieStoreMutex
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcCookieStoreMutex(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcCookieStoreMutexImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Client
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  CryptoError
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CryptoErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  HttpSession
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HttpSessionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  HttpSession
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HttpSessionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  HttpSession
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HttpSessionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Map<String, String> sse_decode_Map_String_String_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcCookieStoreMutex
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcCookieStoreMutex(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcCookieStoreMutexImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Client
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  CryptoError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return CryptoErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  HttpSession
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return HttpSessionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  CourseSchedule sse_decode_course_schedule(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_name = sse_decode_String(deserializer);
    var var_teacher = sse_decode_String(deserializer);
    var var_timeRange = sse_decode_String(deserializer);
    var var_dayOfWeek = sse_decode_String(deserializer);
    var var_section = sse_decode_usize(deserializer);
    var var_weeks = sse_decode_String(deserializer);
    var var_classroom = sse_decode_String(deserializer);
    var var_duration = sse_decode_String(deserializer);
    return CourseSchedule(
      id: var_id,
      name: var_name,
      teacher: var_teacher,
      timeRange: var_timeRange,
      dayOfWeek: var_dayOfWeek,
      section: var_section,
      weeks: var_weeks,
      classroom: var_classroom,
      duration: var_duration,
    );
  }

  @protected
  CreditInfo sse_decode_credit_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_category = sse_decode_String(deserializer);
    var var_required_ = sse_decode_i_32(deserializer);
    var var_limited = sse_decode_i_32(deserializer);
    var var_elective = sse_decode_i_32(deserializer);
    var var_public = sse_decode_i_32(deserializer);
    var var_total = sse_decode_i_32(deserializer);
    return CreditInfo(
      category: var_category,
      required_: var_required_,
      limited: var_limited,
      elective: var_elective,
      public: var_public,
      total: var_total,
    );
  }

  @protected
  DEKT sse_decode_dekt(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_list = sse_decode_list_dekt_list(deserializer);
    var var_total = sse_decode_list_dekt_total(deserializer);
    return DEKT(list: var_list, total: var_total);
  }

  @protected
  DEKTDetail sse_decode_dekt_detail(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_Map_String_String_None(deserializer);
    return DEKTDetail(field0: var_field0);
  }

  @protected
  DEKTList sse_decode_dekt_list(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_String(deserializer);
    var var_semester = sse_decode_String(deserializer);
    var var_category = sse_decode_String(deserializer);
    var var_subCategory = sse_decode_String(deserializer);
    var var_activityName = sse_decode_String(deserializer);
    var var_credit = sse_decode_String(deserializer);
    var var_operationId = sse_decode_String(deserializer);
    return DEKTList(
      id: var_id,
      semester: var_semester,
      category: var_category,
      subCategory: var_subCategory,
      activityName: var_activityName,
      credit: var_credit,
      operationId: var_operationId,
    );
  }

  @protected
  DEKTTotal sse_decode_dekt_total(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_category = sse_decode_String(deserializer);
    var var_totalCredit = sse_decode_String(deserializer);
    return DEKTTotal(category: var_category, totalCredit: var_totalCredit);
  }

  @protected
  ElectiveResponse sse_decode_elective_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_credits = sse_decode_list_credit_info(deserializer);
    var var_courses = sse_decode_list_xqxkch_info(deserializer);
    return ElectiveResponse(credits: var_credits, courses: var_courses);
  }

  @protected
  ExamSchedule sse_decode_exam_schedule(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_courseCode = sse_decode_String(deserializer);
    var var_courseName = sse_decode_String(deserializer);
    var var_examTime = sse_decode_String(deserializer);
    var var_examLocation = sse_decode_String(deserializer);
    return ExamSchedule(
      id: var_id,
      courseCode: var_courseCode,
      courseName: var_courseName,
      examTime: var_examTime,
      examLocation: var_examLocation,
    );
  }

  @protected
  ExecutionPlan sse_decode_execution_plan(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_semester = sse_decode_String(deserializer);
    var var_courseCode = sse_decode_String(deserializer);
    var var_courseName = sse_decode_String(deserializer);
    var var_department = sse_decode_String(deserializer);
    var var_credits = sse_decode_f_32(deserializer);
    var var_totalHours = sse_decode_f_32(deserializer);
    var var_assessmentMethod = sse_decode_String(deserializer);
    var var_courseType = sse_decode_String(deserializer);
    var var_isExam = sse_decode_String(deserializer);
    return ExecutionPlan(
      id: var_id,
      semester: var_semester,
      courseCode: var_courseCode,
      courseName: var_courseName,
      department: var_department,
      credits: var_credits,
      totalHours: var_totalHours,
      assessmentMethod: var_assessmentMethod,
      courseType: var_courseType,
      isExam: var_isExam,
    );
  }

  @protected
  ExecutionPlanResponse sse_decode_execution_plan_response(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_plans = sse_decode_list_execution_plan(deserializer);
    var var_semesters = sse_decode_list_String(deserializer);
    return ExecutionPlanResponse(plans: var_plans, semesters: var_semesters);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<CourseSchedule> sse_decode_list_course_schedule(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <CourseSchedule>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_course_schedule(deserializer));
    }
    return ans_;
  }

  @protected
  List<CreditInfo> sse_decode_list_credit_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <CreditInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_credit_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<DEKTList> sse_decode_list_dekt_list(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DEKTList>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_dekt_list(deserializer));
    }
    return ans_;
  }

  @protected
  List<DEKTTotal> sse_decode_list_dekt_total(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DEKTTotal>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_dekt_total(deserializer));
    }
    return ans_;
  }

  @protected
  List<ExamSchedule> sse_decode_list_exam_schedule(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ExamSchedule>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_exam_schedule(deserializer));
    }
    return ans_;
  }

  @protected
  List<ExecutionPlan> sse_decode_list_execution_plan(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ExecutionPlan>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_execution_plan(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<ScoreInfo> sse_decode_list_score_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <ScoreInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_score_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<SemesterInfo> sse_decode_list_semester_info(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <SemesterInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_semester_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<XqxkchInfo> sse_decode_list_xqxkch_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <XqxkchInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_xqxkch_info(deserializer));
    }
    return ans_;
  }

  @protected
  (String, String) sse_decode_record_string_string(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  ScoreInfo sse_decode_score_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_id = sse_decode_u_32(deserializer);
    var var_term = sse_decode_String(deserializer);
    var var_courseId = sse_decode_String(deserializer);
    var var_courseName = sse_decode_String(deserializer);
    var var_score = sse_decode_f_32(deserializer);
    var var_credit = sse_decode_f_32(deserializer);
    var var_hours = sse_decode_f_32(deserializer);
    var var_gpa = sse_decode_f_32(deserializer);
    var var_examType = sse_decode_String(deserializer);
    var var_courseAttr = sse_decode_String(deserializer);
    var var_courseNature = sse_decode_String(deserializer);
    return ScoreInfo(
      id: var_id,
      term: var_term,
      courseId: var_courseId,
      courseName: var_courseName,
      score: var_score,
      credit: var_credit,
      hours: var_hours,
      gpa: var_gpa,
      examType: var_examType,
      courseAttr: var_courseAttr,
      courseNature: var_courseNature,
    );
  }

  @protected
  ScoreSummary sse_decode_score_summary(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_creditTotal = sse_decode_f_32(deserializer);
    var var_gpaAverage = sse_decode_f_32(deserializer);
    return ScoreSummary(
      creditTotal: var_creditTotal,
      gpaAverage: var_gpaAverage,
    );
  }

  @protected
  ScoreTotal sse_decode_score_total(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_info = sse_decode_list_score_info(deserializer);
    var var_summary = sse_decode_score_summary(deserializer);
    return ScoreTotal(info: var_info, summary: var_summary);
  }

  @protected
  SemesterInfo sse_decode_semester_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_key = sse_decode_String(deserializer);
    var var_value = sse_decode_String(deserializer);
    return SemesterInfo(key: var_key, value: var_value);
  }

  @protected
  StudentInfo sse_decode_student_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_name = sse_decode_String(deserializer);
    var var_gender = sse_decode_String(deserializer);
    var var_studentId = sse_decode_String(deserializer);
    var var_department = sse_decode_String(deserializer);
    var var_major = sse_decode_String(deserializer);
    var var_className = sse_decode_String(deserializer);
    var var_admissionDate = sse_decode_String(deserializer);
    var var_admissionNumber = sse_decode_String(deserializer);
    var var_idNumber = sse_decode_String(deserializer);
    return StudentInfo(
      name: var_name,
      gender: var_gender,
      studentId: var_studentId,
      department: var_department,
      major: var_major,
      className: var_className,
      admissionDate: var_admissionDate,
      admissionNumber: var_admissionNumber,
      idNumber: var_idNumber,
    );
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  XqxkchInfo sse_decode_xqxkch_info(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_courseId = sse_decode_String(deserializer);
    var var_courseName = sse_decode_String(deserializer);
    var var_department = sse_decode_String(deserializer);
    var var_hours = sse_decode_i_32(deserializer);
    var var_credits = sse_decode_f_32(deserializer);
    var var_courseAttribute = sse_decode_String(deserializer);
    var var_selectionType = sse_decode_String(deserializer);
    var var_selected = sse_decode_String(deserializer);
    return XqxkchInfo(
      courseId: var_courseId,
      courseName: var_courseName,
      department: var_department,
      hours: var_hours,
      credits: var_credits,
      courseAttribute: var_courseAttribute,
      selectionType: var_selectionType,
      selected: var_selected,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcCookieStoreMutex(
    ArcCookieStoreMutex self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcCookieStoreMutexImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
    Client self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ClientImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoError(
    CryptoError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as CryptoErrorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
    HttpSession self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as HttpSessionImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
    HttpSession self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as HttpSessionImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
    HttpSession self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as HttpSessionImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void sse_encode_Map_String_String_None(
    Map<String, String> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcCookieStoreMutex(
    ArcCookieStoreMutex self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcCookieStoreMutexImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
    Client self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ClientImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerCryptoError(
    CryptoError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as CryptoErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerHttpSession(
    HttpSession self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as HttpSessionImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_course_schedule(
    CourseSchedule self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.teacher, serializer);
    sse_encode_String(self.timeRange, serializer);
    sse_encode_String(self.dayOfWeek, serializer);
    sse_encode_usize(self.section, serializer);
    sse_encode_String(self.weeks, serializer);
    sse_encode_String(self.classroom, serializer);
    sse_encode_String(self.duration, serializer);
  }

  @protected
  void sse_encode_credit_info(CreditInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.category, serializer);
    sse_encode_i_32(self.required_, serializer);
    sse_encode_i_32(self.limited, serializer);
    sse_encode_i_32(self.elective, serializer);
    sse_encode_i_32(self.public, serializer);
    sse_encode_i_32(self.total, serializer);
  }

  @protected
  void sse_encode_dekt(DEKT self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_dekt_list(self.list, serializer);
    sse_encode_list_dekt_total(self.total, serializer);
  }

  @protected
  void sse_encode_dekt_detail(DEKTDetail self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Map_String_String_None(self.field0, serializer);
  }

  @protected
  void sse_encode_dekt_list(DEKTList self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.semester, serializer);
    sse_encode_String(self.category, serializer);
    sse_encode_String(self.subCategory, serializer);
    sse_encode_String(self.activityName, serializer);
    sse_encode_String(self.credit, serializer);
    sse_encode_String(self.operationId, serializer);
  }

  @protected
  void sse_encode_dekt_total(DEKTTotal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.category, serializer);
    sse_encode_String(self.totalCredit, serializer);
  }

  @protected
  void sse_encode_elective_response(
    ElectiveResponse self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_credit_info(self.credits, serializer);
    sse_encode_list_xqxkch_info(self.courses, serializer);
  }

  @protected
  void sse_encode_exam_schedule(ExamSchedule self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.courseCode, serializer);
    sse_encode_String(self.courseName, serializer);
    sse_encode_String(self.examTime, serializer);
    sse_encode_String(self.examLocation, serializer);
  }

  @protected
  void sse_encode_execution_plan(ExecutionPlan self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.semester, serializer);
    sse_encode_String(self.courseCode, serializer);
    sse_encode_String(self.courseName, serializer);
    sse_encode_String(self.department, serializer);
    sse_encode_f_32(self.credits, serializer);
    sse_encode_f_32(self.totalHours, serializer);
    sse_encode_String(self.assessmentMethod, serializer);
    sse_encode_String(self.courseType, serializer);
    sse_encode_String(self.isExam, serializer);
  }

  @protected
  void sse_encode_execution_plan_response(
    ExecutionPlanResponse self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_execution_plan(self.plans, serializer);
    sse_encode_list_String(self.semesters, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_course_schedule(
    List<CourseSchedule> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_course_schedule(item, serializer);
    }
  }

  @protected
  void sse_encode_list_credit_info(
    List<CreditInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_credit_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_dekt_list(
    List<DEKTList> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_dekt_list(item, serializer);
    }
  }

  @protected
  void sse_encode_list_dekt_total(
    List<DEKTTotal> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_dekt_total(item, serializer);
    }
  }

  @protected
  void sse_encode_list_exam_schedule(
    List<ExamSchedule> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_exam_schedule(item, serializer);
    }
  }

  @protected
  void sse_encode_list_execution_plan(
    List<ExecutionPlan> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_execution_plan(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
    List<(String, String)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_score_info(
    List<ScoreInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_score_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_semester_info(
    List<SemesterInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_semester_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_xqxkch_info(
    List<XqxkchInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_xqxkch_info(item, serializer);
    }
  }

  @protected
  void sse_encode_record_string_string(
    (String, String) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_score_info(ScoreInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self.id, serializer);
    sse_encode_String(self.term, serializer);
    sse_encode_String(self.courseId, serializer);
    sse_encode_String(self.courseName, serializer);
    sse_encode_f_32(self.score, serializer);
    sse_encode_f_32(self.credit, serializer);
    sse_encode_f_32(self.hours, serializer);
    sse_encode_f_32(self.gpa, serializer);
    sse_encode_String(self.examType, serializer);
    sse_encode_String(self.courseAttr, serializer);
    sse_encode_String(self.courseNature, serializer);
  }

  @protected
  void sse_encode_score_summary(ScoreSummary self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_32(self.creditTotal, serializer);
    sse_encode_f_32(self.gpaAverage, serializer);
  }

  @protected
  void sse_encode_score_total(ScoreTotal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_score_info(self.info, serializer);
    sse_encode_score_summary(self.summary, serializer);
  }

  @protected
  void sse_encode_semester_info(SemesterInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.key, serializer);
    sse_encode_String(self.value, serializer);
  }

  @protected
  void sse_encode_student_info(StudentInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.name, serializer);
    sse_encode_String(self.gender, serializer);
    sse_encode_String(self.studentId, serializer);
    sse_encode_String(self.department, serializer);
    sse_encode_String(self.major, serializer);
    sse_encode_String(self.className, serializer);
    sse_encode_String(self.admissionDate, serializer);
    sse_encode_String(self.admissionNumber, serializer);
    sse_encode_String(self.idNumber, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_xqxkch_info(XqxkchInfo self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.courseId, serializer);
    sse_encode_String(self.courseName, serializer);
    sse_encode_String(self.department, serializer);
    sse_encode_i_32(self.hours, serializer);
    sse_encode_f_32(self.credits, serializer);
    sse_encode_String(self.courseAttribute, serializer);
    sse_encode_String(self.selectionType, serializer);
    sse_encode_String(self.selected, serializer);
  }
}

@sealed
class ArcCookieStoreMutexImpl extends RustOpaque
    implements ArcCookieStoreMutex {
  // Not to be used by end users
  ArcCookieStoreMutexImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcCookieStoreMutexImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_increment_strong_count_ArcCookieStoreMutex,
    rustArcDecrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_ArcCookieStoreMutex,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_ArcCookieStoreMutexPtr,
  );
}

@sealed
class ClientImpl extends RustOpaque implements Client {
  // Not to be used by end users
  ClientImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Client,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Client,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientPtr,
  );
}

@sealed
class CryptoErrorImpl extends RustOpaque implements CryptoError {
  // Not to be used by end users
  CryptoErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  CryptoErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_CryptoError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_CryptoError,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_CryptoErrorPtr,
  );
}

@sealed
class HttpSessionImpl extends RustOpaque implements HttpSession {
  // Not to be used by end users
  HttpSessionImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  HttpSessionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_HttpSession,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_HttpSession,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_HttpSessionPtr,
  );

  Future<bool> accessJwxt() =>
      RustLib.instance.api.crateApiSessionHttpSessionAccessJwxt(that: this);

  ArcCookieStoreMutex get cookieStore => RustLib.instance.api
      .crateApiSessionHttpSessionAutoAccessorGetCookieStore(that: this);

  Client get client => RustLib.instance.api
      .crateApiSessionHttpSessionAutoAccessorGetClient(that: this);

  set cookieStore(ArcCookieStoreMutex cookieStore) =>
      RustLib.instance.api.crateApiSessionHttpSessionAutoAccessorSetCookieStore(
        that: this,
        cookieStore: cookieStore,
      );

  set client(Client client) =>
      RustLib.instance.api.crateApiSessionHttpSessionAutoAccessorSetClient(
        that: this,
        client: client,
      );

  Future<String> completeLogin({
    required String username,
    required String vpnPassword,
    required String oaPassword,
    required String captcha,
  }) => RustLib.instance.api.crateApiSessionHttpSessionCompleteLogin(
    that: this,
    username: username,
    vpnPassword: vpnPassword,
    oaPassword: oaPassword,
    captcha: captcha,
  );

  Future<Uint8List> getCaptcha() =>
      RustLib.instance.api.crateApiSessionHttpSessionGetCaptcha(that: this);

  Future<String> getFlowExecutionKey() => RustLib.instance.api
      .crateApiSessionHttpSessionGetFlowExecutionKey(that: this);
}
