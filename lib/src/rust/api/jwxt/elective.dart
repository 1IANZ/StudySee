// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<ElectiveResponse> parseElective({required String html}) =>
    RustLib.instance.api.crateApiJwxtElectiveParseElective(html: html);

class CreditInfo {
  final String category;
  final int required_;
  final int limited;
  final int elective;
  final int public;
  final int total;

  const CreditInfo({
    required this.category,
    required this.required_,
    required this.limited,
    required this.elective,
    required this.public,
    required this.total,
  });

  @override
  int get hashCode =>
      category.hashCode ^
      required_.hashCode ^
      limited.hashCode ^
      elective.hashCode ^
      public.hashCode ^
      total.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CreditInfo &&
          runtimeType == other.runtimeType &&
          category == other.category &&
          required_ == other.required_ &&
          limited == other.limited &&
          elective == other.elective &&
          public == other.public &&
          total == other.total;
}

class ElectiveResponse {
  final List<CreditInfo> credits;
  final List<XqxkchInfo> courses;

  const ElectiveResponse({required this.credits, required this.courses});

  @override
  int get hashCode => credits.hashCode ^ courses.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ElectiveResponse &&
          runtimeType == other.runtimeType &&
          credits == other.credits &&
          courses == other.courses;
}

class XqxkchInfo {
  final String courseId;
  final String courseName;
  final String department;
  final int hours;
  final double credits;
  final String courseAttribute;
  final String selectionType;
  final String selected;

  const XqxkchInfo({
    required this.courseId,
    required this.courseName,
    required this.department,
    required this.hours,
    required this.credits,
    required this.courseAttribute,
    required this.selectionType,
    required this.selected,
  });

  @override
  int get hashCode =>
      courseId.hashCode ^
      courseName.hashCode ^
      department.hashCode ^
      hours.hashCode ^
      credits.hashCode ^
      courseAttribute.hashCode ^
      selectionType.hashCode ^
      selected.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is XqxkchInfo &&
          runtimeType == other.runtimeType &&
          courseId == other.courseId &&
          courseName == other.courseName &&
          department == other.department &&
          hours == other.hours &&
          credits == other.credits &&
          courseAttribute == other.courseAttribute &&
          selectionType == other.selectionType &&
          selected == other.selected;
}
