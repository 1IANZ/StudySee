// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<List<ScoreInfo>> parseScore({required String html}) =>
    RustLib.instance.api.crateApiJwxtScoreParseScore(html: html);

Future<ScoreSummary> parseScoreSummary({required String html}) =>
    RustLib.instance.api.crateApiJwxtScoreParseScoreSummary(html: html);

Future<ScoreTotal> parseScoreAll({required String html}) =>
    RustLib.instance.api.crateApiJwxtScoreParseScoreAll(html: html);

class ScoreInfo {
  final int id;
  final String term;
  final String courseId;
  final String courseName;
  final double score;
  final double credit;
  final double hours;
  final double gpa;
  final String examType;
  final String courseAttr;
  final String courseNature;

  const ScoreInfo({
    required this.id,
    required this.term,
    required this.courseId,
    required this.courseName,
    required this.score,
    required this.credit,
    required this.hours,
    required this.gpa,
    required this.examType,
    required this.courseAttr,
    required this.courseNature,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      term.hashCode ^
      courseId.hashCode ^
      courseName.hashCode ^
      score.hashCode ^
      credit.hashCode ^
      hours.hashCode ^
      gpa.hashCode ^
      examType.hashCode ^
      courseAttr.hashCode ^
      courseNature.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ScoreInfo &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          term == other.term &&
          courseId == other.courseId &&
          courseName == other.courseName &&
          score == other.score &&
          credit == other.credit &&
          hours == other.hours &&
          gpa == other.gpa &&
          examType == other.examType &&
          courseAttr == other.courseAttr &&
          courseNature == other.courseNature;
}

class ScoreSummary {
  final double creditTotal;
  final double gpaAverage;

  const ScoreSummary({required this.creditTotal, required this.gpaAverage});

  @override
  int get hashCode => creditTotal.hashCode ^ gpaAverage.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ScoreSummary &&
          runtimeType == other.runtimeType &&
          creditTotal == other.creditTotal &&
          gpaAverage == other.gpaAverage;
}

class ScoreTotal {
  final List<ScoreInfo> info;
  final ScoreSummary summary;

  const ScoreTotal({required this.info, required this.summary});

  @override
  int get hashCode => info.hashCode ^ summary.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ScoreTotal &&
          runtimeType == other.runtimeType &&
          info == other.info &&
          summary == other.summary;
}
