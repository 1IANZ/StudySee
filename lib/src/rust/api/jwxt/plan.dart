// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<ExecutionPlanResponse> parsePlan({required String html}) =>
    RustLib.instance.api.crateApiJwxtPlanParsePlan(html: html);

class ExecutionPlan {
  final int id;
  final String semester;
  final String courseCode;
  final String courseName;
  final String department;
  final double credits;
  final double totalHours;
  final String assessmentMethod;
  final String courseType;
  final String isExam;

  const ExecutionPlan({
    required this.id,
    required this.semester,
    required this.courseCode,
    required this.courseName,
    required this.department,
    required this.credits,
    required this.totalHours,
    required this.assessmentMethod,
    required this.courseType,
    required this.isExam,
  });

  @override
  int get hashCode =>
      id.hashCode ^
      semester.hashCode ^
      courseCode.hashCode ^
      courseName.hashCode ^
      department.hashCode ^
      credits.hashCode ^
      totalHours.hashCode ^
      assessmentMethod.hashCode ^
      courseType.hashCode ^
      isExam.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ExecutionPlan &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          semester == other.semester &&
          courseCode == other.courseCode &&
          courseName == other.courseName &&
          department == other.department &&
          credits == other.credits &&
          totalHours == other.totalHours &&
          assessmentMethod == other.assessmentMethod &&
          courseType == other.courseType &&
          isExam == other.isExam;
}

class ExecutionPlanResponse {
  final List<ExecutionPlan> plans;
  final List<String> semesters;

  const ExecutionPlanResponse({required this.plans, required this.semesters});

  @override
  int get hashCode => plans.hashCode ^ semesters.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ExecutionPlanResponse &&
          runtimeType == other.runtimeType &&
          plans == other.plans &&
          semesters == other.semesters;
}
